#!/usr/bin/env python3

import sys
import os

tools_dir = '/home/brylant/Development/Tools'
tools = {
  'jdk': {
    '1.7': 'jdk1.7',
    '1.8': 'jdk1.8'
  }
}
    
class Paths:
  def __init__(self, linkPath, toolPath):
    self.linkPath = linkPath
    self.toolPath = toolPath

def printUsage():
  print('USAGE: {} <tool> <version>'.format(sys.argv[0]))

def validateInput():
  if len(sys.argv) != 3:
    print('wrong number of arguments')
    printUsage()
    sys.exit(1)
  tool = sys.argv[1]
  version = sys.argv[2]
  if tool not in tools:
    print('unknown tool {}'.format(tool))
    sys.exit(1)
  if version not in tools[tool]:
    print('unknown {} version {}'.format(tool, version))
    sys.exit(1)
  
def createPaths():
  tool = sys.argv[1]
  version = sys.argv[2]
  linkPath = tools_dir + '/' + tool
  toolPath = tools_dir + '/' + tools[tool][version]
  return Paths(linkPath, toolPath)

def validatePaths(linkPath, toolPath):
  if os.path.exists(linkPath) and not os.path.islink(linkPath):
    print('ERROR: path {} exists but is not a symbolic link'.format(linkPath))
    sys.exit(1)
  if not os.path.exists(toolPath):
    print('ERROR: directory {} does not exist'.format(toolPath))
    sys.exit(1)
  elif not os.path.isdir(toolPath):
    print('ERROR: path {} exists but is not a directory'.format(toolPath))
    sys.exit(1)

if __name__ == "__main__":
  validateInput()
  p = createPaths()
  validatePaths(p.linkPath, p.toolPath)
  if os.path.exists(p.linkPath):
    os.remove(p.linkPath)
  os.symlink(p.toolPath, p.linkPath)
