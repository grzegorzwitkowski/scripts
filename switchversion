#!/usr/bin/env python

import sys
import os

tools_dir = 'C:/ProgramFiles'
tools = {
  'jdk': {
    '1.7': 'jdk1.7.0_79',
    '1.8': 'jdk1.8.0_101'
  }
}

class Paths:
  def __init__(self, link, tool):
    self.link = link
    self.tool = tool

def validate_input():
  if len(sys.argv) != 3:
    print('wrong number of arguments\nUSAGE: {} <tool> <version>'.format(sys.argv[0]))
    sys.exit(1)
  script_path, tool, version = sys.argv
  if tool not in tools:
    print('unknown tool {}'.format(tool))
    sys.exit(1)
  if version not in tools[tool]:
    print('unknown {} version {}'.format(tool, version))
    sys.exit(1)

def create_paths():
  script_path, tool, version = sys.argv
  link_path = tools_dir + '/' + tool
  tool_path = tools_dir + '/' + tools[tool][version]
  return Paths(link_path, tool_path)

def validate_paths(p):
  if os.path.exists(p.link) and not os.path.islink(p.link):
    print('ERROR: path {} exists but is not a symbolic link'.format(p.link))
    sys.exit(1)
  if not os.path.exists(p.tool):
    print('ERROR: directory {} does not exist'.format(p.tool))
    sys.exit(1)
  elif not os.path.isdir(p.tool):
    print('ERROR: path {} exists but is not a directory'.format(p.tool))
    sys.exit(1)

if __name__ == "__main__":
  validate_input()
  p = create_paths()
  validate_paths(p)
  if os.path.exists(p.link):
    os.remove(p.link)
  os.symlink(p.tool, p.link)
